{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\kousa\\\\OneDrive\\\\Documents\\\\Project\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\kousa\\\\OneDrive\\\\Documents\\\\Project\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\Users\\\\kousa\\\\OneDrive\\\\Documents\\\\Project\\\\my-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport React, { useEffect, useLayoutEffect, createContext, useContext, useMemo, useRef, createElement, useState, useCallback } from 'react';\n\n// Shared state between server components and client components\nvar noop = function noop() {};\n// Using noop() as the undefined value as undefined can be replaced\n// by something else. Prettier ignore and extra parentheses are necessary here\n// to ensure that tsc doesn't remove the __NOINLINE__ comment.\n// prettier-ignore\nvar UNDEFINED = /*#__NOINLINE__*/noop();\nvar OBJECT = Object;\nvar isUndefined = function isUndefined(v) {\n  return v === UNDEFINED;\n};\nvar isFunction = function isFunction(v) {\n  return typeof v == 'function';\n};\nvar mergeObjects = function mergeObjects(a, b) {\n  return _objectSpread({}, a, b);\n};\nvar isPromiseLike = function isPromiseLike(x) {\n  return isFunction(x.then);\n};\n\n// use WeakMap to store the object->key mapping\n// so the objects can be garbage collected.\n// WeakMap uses a hashtable under the hood, so the lookup\n// complexity is almost O(1).\nvar table = new WeakMap();\n// counter of the key\nvar counter = 0;\n// A stable hash implementation that supports:\n// - Fast and ensures unique hash properties\n// - Handles unserializable values\n// - Handles object key ordering\n// - Generates short results\n//\n// This is not a serialization function, and the result is not guaranteed to be\n// parsable.\nvar stableHash = function stableHash(arg) {\n  var type = typeof arg;\n  var constructor = arg && arg.constructor;\n  var isDate = constructor == Date;\n  var result;\n  var index;\n  if (OBJECT(arg) === arg && !isDate && constructor != RegExp) {\n    // Object/function, not null/date/regexp. Use WeakMap to store the id first.\n    // If it's already hashed, directly return the result.\n    result = table.get(arg);\n    if (result) return result;\n    // Store the hash first for circular reference detection before entering the\n    // recursive `stableHash` calls.\n    // For other objects like set and map, we use this id directly as the hash.\n    result = ++counter + '~';\n    table.set(arg, result);\n    if (constructor == Array) {\n      // Array.\n      result = '@';\n      for (index = 0; index < arg.length; index++) {\n        result += stableHash(arg[index]) + ',';\n      }\n      table.set(arg, result);\n    }\n    if (constructor == OBJECT) {\n      // Object, sort keys.\n      result = '#';\n      var keys = OBJECT.keys(arg).sort();\n      while (!isUndefined(index = keys.pop())) {\n        if (!isUndefined(arg[index])) {\n          result += index + ':' + stableHash(arg[index]) + ',';\n        }\n      }\n      table.set(arg, result);\n    }\n  } else {\n    result = isDate ? arg.toJSON() : type == 'symbol' ? arg.toString() : type == 'string' ? JSON.stringify(arg) : '' + arg;\n  }\n  return result;\n};\n\n// Global state used to deduplicate requests and store listeners\nvar SWRGlobalState = new WeakMap();\nvar EMPTY_CACHE = {};\nvar INITIAL_CACHE = {};\nvar STR_UNDEFINED = 'undefined';\n// NOTE: Use the function to guarantee it's re-evaluated between jsdom and node runtime for tests.\nvar isWindowDefined = typeof window != STR_UNDEFINED;\nvar isDocumentDefined = typeof document != STR_UNDEFINED;\nvar hasRequestAnimationFrame = function hasRequestAnimationFrame() {\n  return isWindowDefined && typeof window['requestAnimationFrame'] != STR_UNDEFINED;\n};\nvar createCacheHelper = function createCacheHelper(cache, key) {\n  var state = SWRGlobalState.get(cache);\n  return [\n  // Getter\n  function () {\n    return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n  },\n  // Setter\n  function (info) {\n    if (!isUndefined(key)) {\n      var prev = cache.get(key);\n      // Before writing to the store, we keep the value in the initial cache\n      // if it's not there yet.\n      if (!(key in INITIAL_CACHE)) {\n        INITIAL_CACHE[key] = prev;\n      }\n      state[5](key, mergeObjects(prev, info), prev || EMPTY_CACHE);\n    }\n  },\n  // Subscriber\n  state[6],\n  // Get server cache snapshot\n  function () {\n    if (!isUndefined(key)) {\n      // If the cache was updated on the client, we return the stored initial value.\n      if (key in INITIAL_CACHE) return INITIAL_CACHE[key];\n    }\n    // If we haven't done any client-side updates, we return the current value.\n    return !isUndefined(key) && cache.get(key) || EMPTY_CACHE;\n  }];\n} // export { UNDEFINED, OBJECT, isUndefined, isFunction, mergeObjects, isPromiseLike }\n;\n\n/**\n * Due to the bug https://bugs.chromium.org/p/chromium/issues/detail?id=678075,\n * it's not reliable to detect if the browser is currently online or offline\n * based on `navigator.onLine`.\n * As a workaround, we always assume it's online on the first load, and change\n * the status upon `online` or `offline` events.\n */\nvar online = true;\nvar isOnline = function isOnline() {\n  return online;\n};\n// For node and React Native, `add/removeEventListener` doesn't exist on window.\nvar _ref = isWindowDefined && window.addEventListener ? [window.addEventListener.bind(window), window.removeEventListener.bind(window)] : [noop, noop],\n  _ref2 = _slicedToArray(_ref, 2),\n  onWindowEvent = _ref2[0],\n  offWindowEvent = _ref2[1];\nvar isVisible = function isVisible() {\n  var visibilityState = isDocumentDefined && document.visibilityState;\n  return isUndefined(visibilityState) || visibilityState !== 'hidden';\n};\nvar initFocus = function initFocus(callback) {\n  // focus revalidate\n  if (isDocumentDefined) {\n    document.addEventListener('visibilitychange', callback);\n  }\n  onWindowEvent('focus', callback);\n  return function () {\n    if (isDocumentDefined) {\n      document.removeEventListener('visibilitychange', callback);\n    }\n    offWindowEvent('focus', callback);\n  };\n};\nvar initReconnect = function initReconnect(callback) {\n  // revalidate on reconnected\n  var onOnline = function onOnline() {\n    online = true;\n    callback();\n  };\n  // nothing to revalidate, just update the status\n  var onOffline = function onOffline() {\n    online = false;\n  };\n  onWindowEvent('online', onOnline);\n  onWindowEvent('offline', onOffline);\n  return function () {\n    offWindowEvent('online', onOnline);\n    offWindowEvent('offline', onOffline);\n  };\n};\nvar preset = {\n  isOnline: isOnline,\n  isVisible: isVisible\n};\nvar defaultConfigOptions = {\n  initFocus: initFocus,\n  initReconnect: initReconnect\n};\nvar IS_REACT_LEGACY = !React.useId;\nvar IS_SERVER = !isWindowDefined || 'Deno' in window;\n// Polyfill requestAnimationFrame\nvar rAF = function rAF(f) {\n  return hasRequestAnimationFrame() ? window['requestAnimationFrame'](f) : setTimeout(f, 1);\n};\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nvar useIsomorphicLayoutEffect = IS_SERVER ? useEffect : useLayoutEffect;\n// This assignment is to extend the Navigator type to use effectiveType.\nvar navigatorConnection = typeof navigator !== 'undefined' && navigator.connection;\n// Adjust the config based on slow connection status (<= 70Kbps).\nvar slowConnection = !IS_SERVER && navigatorConnection && (['slow-2g', '2g'].includes(navigatorConnection.effectiveType) || navigatorConnection.saveData);\nvar serialize = function serialize(key) {\n  if (isFunction(key)) {\n    try {\n      key = key();\n    } catch (err) {\n      // dependencies not ready\n      key = '';\n    }\n  }\n  // Use the original key as the argument of fetcher. This can be a string or an\n  // array of values.\n  var args = key;\n  // If key is not falsy, or not an empty array, hash it.\n  key = typeof key == 'string' ? key : (Array.isArray(key) ? key.length : key) ? stableHash(key) : '';\n  return [key, args];\n};\n\n// Global timestamp.\nvar __timestamp = 0;\nvar getTimestamp = function getTimestamp() {\n  return ++__timestamp;\n};\nvar FOCUS_EVENT = 0;\nvar RECONNECT_EVENT = 1;\nvar MUTATE_EVENT = 2;\nvar ERROR_REVALIDATE_EVENT = 3;\nvar constants = {\n  __proto__: null,\n  ERROR_REVALIDATE_EVENT: ERROR_REVALIDATE_EVENT,\n  FOCUS_EVENT: FOCUS_EVENT,\n  MUTATE_EVENT: MUTATE_EVENT,\n  RECONNECT_EVENT: RECONNECT_EVENT\n};\nfunction internalMutate() {\n  return _internalMutate.apply(this, arguments);\n}\nfunction _internalMutate() {\n  _internalMutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var _len,\n      args,\n      _key2,\n      cache,\n      _key,\n      _data,\n      _opts,\n      options,\n      populateCache,\n      rollbackOnErrorOption,\n      optimisticData,\n      revalidate,\n      rollbackOnError,\n      throwOnError,\n      keyFilter,\n      matchedKeys,\n      it,\n      _iterator2,\n      _step2,\n      key,\n      mutateByKey,\n      _mutateByKey,\n      _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _mutateByKey = function _mutateByKey3() {\n            _mutateByKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_k) {\n              var _serialize5, _serialize6, key, _createCacheHelper, _createCacheHelper2, get, set, _SWRGlobalState$get5, _SWRGlobalState$get6, EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD, revalidators, startRevalidate, data, error, beforeMutationTs, hasOptimisticData, state, displayedData, currentData, committedData, res;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    // Serialize key\n                    _serialize5 = serialize(_k), _serialize6 = _slicedToArray(_serialize5, 1), key = _serialize6[0];\n                    if (key) {\n                      _context.next = 3;\n                      break;\n                    }\n                    return _context.abrupt(\"return\");\n                  case 3:\n                    _createCacheHelper = createCacheHelper(cache, key), _createCacheHelper2 = _slicedToArray(_createCacheHelper, 2), get = _createCacheHelper2[0], set = _createCacheHelper2[1];\n                    _SWRGlobalState$get5 = SWRGlobalState.get(cache), _SWRGlobalState$get6 = _slicedToArray(_SWRGlobalState$get5, 4), EVENT_REVALIDATORS = _SWRGlobalState$get6[0], MUTATION = _SWRGlobalState$get6[1], FETCH = _SWRGlobalState$get6[2], PRELOAD = _SWRGlobalState$get6[3];\n                    revalidators = EVENT_REVALIDATORS[key];\n                    startRevalidate = function startRevalidate() {\n                      if (revalidate) {\n                        // Invalidate the key by deleting the concurrent request markers so new\n                        // requests will not be deduped.\n                        delete FETCH[key];\n                        delete PRELOAD[key];\n                        if (revalidators && revalidators[0]) {\n                          return revalidators[0](MUTATE_EVENT).then(function () {\n                            return get().data;\n                          });\n                        }\n                      }\n                      return get().data;\n                    }; // If there is no new data provided, revalidate the key with current state.\n                    if (!(args.length < 3)) {\n                      _context.next = 9;\n                      break;\n                    }\n                    return _context.abrupt(\"return\", startRevalidate());\n                  case 9:\n                    data = _data;\n                    // Update global timestamps.\n                    beforeMutationTs = getTimestamp();\n                    MUTATION[key] = [beforeMutationTs, 0];\n                    hasOptimisticData = !isUndefined(optimisticData);\n                    state = get(); // `displayedData` is the current value on screen. It could be the optimistic value\n                    // that is going to be overridden by a `committedData`, or get reverted back.\n                    // `committedData` is the validated value that comes from a fetch or mutation.\n                    displayedData = state.data;\n                    currentData = state._c;\n                    committedData = isUndefined(currentData) ? displayedData : currentData; // Do optimistic data update.\n                    if (hasOptimisticData) {\n                      optimisticData = isFunction(optimisticData) ? optimisticData(committedData, displayedData) : optimisticData;\n                      // When we set optimistic data, backup the current committedData data in `_c`.\n                      set({\n                        data: optimisticData,\n                        _c: committedData\n                      });\n                    }\n                    if (isFunction(data)) {\n                      // `data` is a function, call it passing current cache value.\n                      try {\n                        data = data(committedData);\n                      } catch (err) {\n                        // If it throws an error synchronously, we shouldn't update the cache.\n                        error = err;\n                      }\n                    }\n                    // `data` is a promise/thenable, resolve the final data first.\n                    if (!(data && isPromiseLike(data))) {\n                      _context.next = 30;\n                      break;\n                    }\n                    _context.next = 22;\n                    return data.catch(function (err) {\n                      error = err;\n                    });\n                  case 22:\n                    data = _context.sent;\n                    if (!(beforeMutationTs !== MUTATION[key][0])) {\n                      _context.next = 29;\n                      break;\n                    }\n                    if (!error) {\n                      _context.next = 26;\n                      break;\n                    }\n                    throw error;\n                  case 26:\n                    return _context.abrupt(\"return\", data);\n                  case 29:\n                    if (error && hasOptimisticData && rollbackOnError(error)) {\n                      // Rollback. Always populate the cache in this case but without\n                      // transforming the data.\n                      populateCache = true;\n                      data = committedData;\n                      // Reset data to be the latest committed data, and clear the `_c` value.\n                      set({\n                        data: data,\n                        _c: UNDEFINED\n                      });\n                    }\n                  case 30:\n                    // If we should write back the cache after request.\n                    if (populateCache) {\n                      if (!error) {\n                        // Transform the result into data.\n                        if (isFunction(populateCache)) {\n                          data = populateCache(data, committedData);\n                        }\n                        // Only update cached data and reset the error if there's no error. Data can be `undefined` here.\n                        set({\n                          data: data,\n                          error: UNDEFINED,\n                          _c: UNDEFINED\n                        });\n                      }\n                    }\n                    // Reset the timestamp to mark the mutation has ended.\n                    MUTATION[key][1] = getTimestamp();\n                    // Update existing SWR Hooks' internal states:\n                    _context.next = 34;\n                    return startRevalidate();\n                  case 34:\n                    res = _context.sent;\n                    // The mutation and revalidation are ended, we can clear it since the data is\n                    // not an optimistic value anymore.\n                    set({\n                      _c: UNDEFINED\n                    });\n                    // Throw error or return data\n                    if (!error) {\n                      _context.next = 40;\n                      break;\n                    }\n                    if (!throwOnError) {\n                      _context.next = 39;\n                      break;\n                    }\n                    throw error;\n                  case 39:\n                    return _context.abrupt(\"return\");\n                  case 40:\n                    return _context.abrupt(\"return\", populateCache ? res : data);\n                  case 41:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n            return _mutateByKey.apply(this, arguments);\n          };\n          mutateByKey = function _mutateByKey2(_x) {\n            return _mutateByKey.apply(this, arguments);\n          };\n          for (_len = _args2.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n            args[_key2] = _args2[_key2];\n          }\n          cache = args[0], _key = args[1], _data = args[2], _opts = args[3]; // When passing as a boolean, it's explicitly used to disable/enable\n          // revalidation.\n          options = mergeObjects({\n            populateCache: true,\n            throwOnError: true\n          }, typeof _opts === 'boolean' ? {\n            revalidate: _opts\n          } : _opts || {});\n          populateCache = options.populateCache;\n          rollbackOnErrorOption = options.rollbackOnError;\n          optimisticData = options.optimisticData;\n          revalidate = options.revalidate !== false;\n          rollbackOnError = function rollbackOnError(error) {\n            return typeof rollbackOnErrorOption === 'function' ? rollbackOnErrorOption(error) : rollbackOnErrorOption !== false;\n          };\n          throwOnError = options.throwOnError; // If the second argument is a key filter, return the mutation results for all\n          // filtered keys.\n          if (!isFunction(_key)) {\n            _context2.next = 18;\n            break;\n          }\n          keyFilter = _key;\n          matchedKeys = [];\n          it = cache.keys();\n          _iterator2 = _createForOfIteratorHelper(it);\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              key = _step2.value;\n              if (\n              // Skip the special useSWRInfinite and useSWRSubscription keys.\n              !/^\\$(inf|sub)\\$/.test(key) && keyFilter(cache.get(key)._k)) {\n                matchedKeys.push(key);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          return _context2.abrupt(\"return\", Promise.all(matchedKeys.map(mutateByKey)));\n        case 18:\n          return _context2.abrupt(\"return\", mutateByKey(_key));\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _internalMutate.apply(this, arguments);\n}\nvar revalidateAllKeys = function revalidateAllKeys(revalidators, type) {\n  for (var key in revalidators) {\n    if (revalidators[key][0]) revalidators[key][0](type);\n  }\n};\nvar initCache = function initCache(provider, options) {\n  // The global state for a specific provider will be used to deduplicate\n  // requests and store listeners. As well as a mutate function that is bound to\n  // the cache.\n  // The provider's global state might be already initialized. Let's try to get the\n  // global state associated with the provider first.\n  if (!SWRGlobalState.has(provider)) {\n    var opts = mergeObjects(defaultConfigOptions, options);\n    // If there's no global state bound to the provider, create a new one with the\n    // new mutate function.\n    var EVENT_REVALIDATORS = {};\n    var _mutate = internalMutate.bind(UNDEFINED, provider);\n    var unmount = noop;\n    var subscriptions = {};\n    var subscribe = function subscribe(key, callback) {\n      var subs = subscriptions[key] || [];\n      subscriptions[key] = subs;\n      subs.push(callback);\n      return function () {\n        return subs.splice(subs.indexOf(callback), 1);\n      };\n    };\n    var setter = function setter(key, value, prev) {\n      provider.set(key, value);\n      var subs = subscriptions[key];\n      if (subs) {\n        var _iterator = _createForOfIteratorHelper(subs),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var fn = _step.value;\n            fn(value, prev);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    };\n    var initProvider = function initProvider() {\n      if (!SWRGlobalState.has(provider)) {\n        // Update the state if it's new, or if the provider has been extended.\n        SWRGlobalState.set(provider, [EVENT_REVALIDATORS, {}, {}, {}, _mutate, setter, subscribe]);\n        if (!IS_SERVER) {\n          // When listening to the native events for auto revalidations,\n          // we intentionally put a delay (setTimeout) here to make sure they are\n          // fired after immediate JavaScript executions, which can be\n          // React's state updates.\n          // This avoids some unnecessary revalidations such as\n          // https://github.com/vercel/swr/issues/1680.\n          var releaseFocus = opts.initFocus(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, FOCUS_EVENT)));\n          var releaseReconnect = opts.initReconnect(setTimeout.bind(UNDEFINED, revalidateAllKeys.bind(UNDEFINED, EVENT_REVALIDATORS, RECONNECT_EVENT)));\n          unmount = function unmount() {\n            releaseFocus && releaseFocus();\n            releaseReconnect && releaseReconnect();\n            // When un-mounting, we need to remove the cache provider from the state\n            // storage too because it's a side-effect. Otherwise, when re-mounting we\n            // will not re-register those event listeners.\n            SWRGlobalState.delete(provider);\n          };\n        }\n      }\n    };\n    initProvider();\n    // This is a new provider, we need to initialize it and setup DOM events\n    // listeners for `focus` and `reconnect` actions.\n    // We might want to inject an extra layer on top of `provider` in the future,\n    // such as key serialization, auto GC, etc.\n    // For now, it's just a `Map` interface without any modifications.\n    return [provider, _mutate, initProvider, unmount];\n  }\n  return [provider, SWRGlobalState.get(provider)[4]];\n};\n\n// error retry\nvar onErrorRetry = function onErrorRetry(_, __, config, revalidate, opts) {\n  var maxRetryCount = config.errorRetryCount;\n  var currentRetryCount = opts.retryCount;\n  // Exponential backoff\n  var timeout = ~~((Math.random() + 0.5) * (1 << (currentRetryCount < 8 ? currentRetryCount : 8))) * config.errorRetryInterval;\n  if (!isUndefined(maxRetryCount) && currentRetryCount > maxRetryCount) {\n    return;\n  }\n  setTimeout(revalidate, timeout, opts);\n};\nvar compare = function compare(currentData, newData) {\n  return stableHash(currentData) == stableHash(newData);\n};\n// Default cache provider\nvar _initCache = initCache(new Map()),\n  _initCache2 = _slicedToArray(_initCache, 2),\n  cache = _initCache2[0],\n  mutate = _initCache2[1]; // Default config\nvar defaultConfig = mergeObjects({\n  // events\n  onLoadingSlow: noop,\n  onSuccess: noop,\n  onError: noop,\n  onErrorRetry: onErrorRetry,\n  onDiscarded: noop,\n  // switches\n  revalidateOnFocus: true,\n  revalidateOnReconnect: true,\n  revalidateIfStale: true,\n  shouldRetryOnError: true,\n  // timeouts\n  errorRetryInterval: slowConnection ? 10000 : 5000,\n  focusThrottleInterval: 5 * 1000,\n  dedupingInterval: 2 * 1000,\n  loadingTimeout: slowConnection ? 5000 : 3000,\n  // providers\n  compare: compare,\n  isPaused: function isPaused() {\n    return false;\n  },\n  cache: cache,\n  mutate: mutate,\n  fallback: {}\n},\n// use web preset by default\npreset);\nvar mergeConfigs = function mergeConfigs(a, b) {\n  // Need to create a new object to avoid mutating the original here.\n  var v = mergeObjects(a, b);\n  // If two configs are provided, merge their `use` and `fallback` options.\n  if (b) {\n    var u1 = a.use,\n      f1 = a.fallback;\n    var u2 = b.use,\n      f2 = b.fallback;\n    if (u1 && u2) {\n      v.use = u1.concat(u2);\n    }\n    if (f1 && f2) {\n      v.fallback = mergeObjects(f1, f2);\n    }\n  }\n  return v;\n};\nvar SWRConfigContext = createContext({});\nvar SWRConfig = function SWRConfig(props) {\n  var value = props.value;\n  var parentConfig = useContext(SWRConfigContext);\n  var isFunctionalConfig = isFunction(value);\n  var config = useMemo(function () {\n    return isFunctionalConfig ? value(parentConfig) : value;\n  }, [isFunctionalConfig, parentConfig, value]);\n  // Extend parent context values and middleware.\n  var extendedConfig = useMemo(function () {\n    return isFunctionalConfig ? config : mergeConfigs(parentConfig, config);\n  }, [isFunctionalConfig, parentConfig, config]);\n  // Should not use the inherited provider.\n  var provider = config && config.provider;\n  // initialize the cache only on first access.\n  var cacheContextRef = useRef(UNDEFINED);\n  if (provider && !cacheContextRef.current) {\n    cacheContextRef.current = initCache(provider(extendedConfig.cache || cache), config);\n  }\n  var cacheContext = cacheContextRef.current;\n  // Override the cache if a new provider is given.\n  if (cacheContext) {\n    extendedConfig.cache = cacheContext[0];\n    extendedConfig.mutate = cacheContext[1];\n  }\n  // Unsubscribe events.\n  useIsomorphicLayoutEffect(function () {\n    if (cacheContext) {\n      cacheContext[2] && cacheContext[2]();\n      return cacheContext[3];\n    }\n  }, []);\n  return createElement(SWRConfigContext.Provider, mergeObjects(props, {\n    value: extendedConfig\n  }));\n};\n\n// @ts-expect-error\nvar enableDevtools = isWindowDefined && window.__SWR_DEVTOOLS_USE__;\nvar use = enableDevtools ? window.__SWR_DEVTOOLS_USE__ : [];\nvar setupDevTools = function setupDevTools() {\n  if (enableDevtools) {\n    // @ts-expect-error\n    window.__SWR_DEVTOOLS_REACT__ = React;\n  }\n};\nvar normalize = function normalize(args) {\n  return isFunction(args[1]) ? [args[0], args[1], args[2] || {}] : [args[0], null, (args[1] === null ? args[2] : args[1]) || {}];\n};\nvar useSWRConfig = function useSWRConfig() {\n  return mergeObjects(defaultConfig, useContext(SWRConfigContext));\n};\nvar preload = function preload(key_, fetcher) {\n  var _serialize = serialize(key_),\n    _serialize2 = _slicedToArray(_serialize, 2),\n    key = _serialize2[0],\n    fnArg = _serialize2[1];\n  var _SWRGlobalState$get = SWRGlobalState.get(cache),\n    _SWRGlobalState$get2 = _slicedToArray(_SWRGlobalState$get, 4),\n    PRELOAD = _SWRGlobalState$get2[3]; // Prevent preload to be called multiple times before used.\n  if (PRELOAD[key]) return PRELOAD[key];\n  var req = fetcher(fnArg);\n  PRELOAD[key] = req;\n  return req;\n};\nvar middleware = function middleware(useSWRNext) {\n  return function (key_, fetcher_, config) {\n    // fetcher might be a sync function, so this should not be an async function\n    var fetcher = fetcher_ && function () {\n      var _serialize3 = serialize(key_),\n        _serialize4 = _slicedToArray(_serialize3, 1),\n        key = _serialize4[0];\n      var _SWRGlobalState$get3 = SWRGlobalState.get(cache),\n        _SWRGlobalState$get4 = _slicedToArray(_SWRGlobalState$get3, 4),\n        PRELOAD = _SWRGlobalState$get4[3];\n      var req = PRELOAD[key];\n      if (isUndefined(req)) return fetcher_.apply(void 0, arguments);\n      delete PRELOAD[key];\n      return req;\n    };\n    return useSWRNext(key_, fetcher, config);\n  };\n};\nvar BUILT_IN_MIDDLEWARE = use.concat(middleware);\n\n// It's tricky to pass generic types as parameters, so we just directly override\n// the types here.\nvar withArgs = function withArgs(hook) {\n  return function useSWRArgs() {\n    // Get the default and inherited configuration.\n    var fallbackConfig = useSWRConfig();\n    // Normalize arguments.\n    for (var _len2 = arguments.length, args = new Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    var _normalize = normalize(args),\n      _normalize2 = _slicedToArray(_normalize, 3),\n      key = _normalize2[0],\n      fn = _normalize2[1],\n      _config = _normalize2[2]; // Merge configurations.\n    var config = mergeConfigs(fallbackConfig, _config);\n    // Apply middleware\n    var next = hook;\n    var use = config.use;\n    var middleware = (use || []).concat(BUILT_IN_MIDDLEWARE);\n    for (var i = middleware.length; i--;) {\n      next = middleware[i](next);\n    }\n    return next(key, fn || config.fetcher || null, config);\n  };\n};\n\n/**\n * An implementation of state with dependency-tracking.\n */\nvar useStateWithDeps = function useStateWithDeps(state) {\n  var rerender = useState({})[1];\n  var unmountedRef = useRef(false);\n  var stateRef = useRef(state);\n  // If a state property (data, error, or isValidating) is accessed by the render\n  // function, we mark the property as a dependency so if it is updated again\n  // in the future, we trigger a rerender.\n  // This is also known as dependency-tracking.\n  var stateDependenciesRef = useRef({\n    data: false,\n    error: false,\n    isValidating: false\n  });\n  /**\n  * @param payload To change stateRef, pass the values explicitly to setState:\n  * @example\n  * ```js\n  * setState({\n  *   isValidating: false\n  *   data: newData // set data to newData\n  *   error: undefined // set error to undefined\n  * })\n  *\n  * setState({\n  *   isValidating: false\n  *   data: undefined // set data to undefined\n  *   error: err // set error to err\n  * })\n  * ```\n  */\n  var setState = useCallback(function (payload) {\n    var shouldRerender = false;\n    var currentState = stateRef.current;\n    for (var _ in payload) {\n      var k = _;\n      // If the property has changed, update the state and mark rerender as\n      // needed.\n      if (currentState[k] !== payload[k]) {\n        currentState[k] = payload[k];\n        // If the property is accessed by the component, a rerender should be\n        // triggered.\n        if (stateDependenciesRef.current[k]) {\n          shouldRerender = true;\n        }\n      }\n    }\n    if (shouldRerender && !unmountedRef.current) {\n      if (IS_REACT_LEGACY) {\n        rerender({});\n      } else {\n        React.startTransition(function () {\n          return rerender({});\n        });\n      }\n    }\n  }, [rerender]);\n  useIsomorphicLayoutEffect(function () {\n    unmountedRef.current = false;\n    return function () {\n      unmountedRef.current = true;\n    };\n  });\n  return [stateRef, stateDependenciesRef.current, setState];\n};\n\n// Add a callback function to a list of keyed callback functions and return\n// the unsubscribe function.\nvar subscribeCallback = function subscribeCallback(key, callbacks, callback) {\n  var keyedRevalidators = callbacks[key] || (callbacks[key] = []);\n  keyedRevalidators.push(callback);\n  return function () {\n    var index = keyedRevalidators.indexOf(callback);\n    if (index >= 0) {\n      // O(1): faster than splice\n      keyedRevalidators[index] = keyedRevalidators[keyedRevalidators.length - 1];\n      keyedRevalidators.pop();\n    }\n  };\n};\n\n// Create a custom hook with a middleware\nvar withMiddleware = function withMiddleware(useSWR, middleware) {\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    var _normalize3 = normalize(args),\n      _normalize4 = _slicedToArray(_normalize3, 3),\n      key = _normalize4[0],\n      fn = _normalize4[1],\n      config = _normalize4[2];\n    var uses = (config.use || []).concat(middleware);\n    return useSWR(key, fn, _objectSpread({}, config, {\n      use: uses\n    }));\n  };\n};\nsetupDevTools();\nexport { IS_REACT_LEGACY, IS_SERVER, OBJECT, SWRConfig, SWRGlobalState, UNDEFINED, cache, compare, createCacheHelper, defaultConfig, defaultConfigOptions, getTimestamp, hasRequestAnimationFrame, initCache, internalMutate, isDocumentDefined, isFunction, isPromiseLike, isUndefined, isWindowDefined, mergeConfigs, mergeObjects, mutate, noop, normalize, preload, preset, rAF, constants as revalidateEvents, serialize, slowConnection, stableHash, subscribeCallback, useIsomorphicLayoutEffect, useSWRConfig, useStateWithDeps, withArgs, withMiddleware };","map":null,"metadata":{},"sourceType":"module"}